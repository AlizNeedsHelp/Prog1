#include <iostream>
#include <string>

using namespace std;

class B1{ //b1 osztaly  OSZTALYOKAT PONTOS VESSZOVEL ZARJUK ::Minden osztaly absztrakt lesz ha ebbol szarmazik
	public:  //public lathatosag
		virtual void vf() {cout <<"B1::vf()"<<endl;}  //virtualis void vf fuggveny 
		void f() {cout << "B1::f()"<<endl;} //megmondja hogy a b1 f fuggvenye
		virtual void pvf()=0; // tisztan virtual fuggveny ..nincsen implementacioja, mukodes nelkuli fuggveny..absztract..nem tudjuk peldanyositani
};

class D1 : public B1{
	public:
	void vf() {cout<<"D1::vf()"<<endl;}
	void f() {cout<<"D1::f()"<<endl;}
};

class D2 : public D1{
	public:
		void pvf(){cout<<"D2::pvf()"<<endl;}  //felulirta a tisztan vir fuggvenyt, ezert nem lesz absztrakt
};

class B2 {
	public:
		virtual void pvf()=0; //tisztán virtuális ..Nem oroklodik semmibol..Absztrakt osztaly
};


class D21 : public B2{  //a public fontos mert nem biztos hogy az az alap oroklesi mod
	public:
		string s;
		void pvf(){cout<<s<<endl;} //felülírja, nem lesz absztrakt ..felulirja a vir fuggvenyt
};
class D22 : public B2{
	public:
		int n;
		void pvf(){cout<<n<<endl;} //felülírja, nem lesz absztrakt ..ugyan ez csak int-el
};

void f(B2& b2) //f fuggveny aminek az argumentuma b2 referencia .. b2 leszarmazottakat akar
{
	b2.pvf(); //meg hivjuk a pvf fuggvenyet.. elfogadja a leszarmazottait is
};


int main(){
	/*B1 b1; // B1 osztaly bi objektuma
	b1.vf(); //b1 virtual es nem virtual fuggveny meghivasa
	b1.f();
	
	D1 d1;
	d1.vf();
	d1.f();
	/*d1.f();
	d1.f();
	d1.f();
	d1.f();	 //negyedik feladat

		
	B1& b1r=d1; //referencia d1 lesz egyenlo
	b1r.vf();
	b1r.f();*/
	 //ezek absztraktak lesznek 
	
	/*D2 d2; //d2 osszes fuggvenyet meghivom
	d2.f();
	d2.vf();
	d2.pvf();	*/
	

	/*B2 b2;
	b2.pvf();*/  //absztrakt fuggveny

	D21 d21;
	d21.s ="d21.s";
	d21.pvf();
	
	D22 d22;
	d22.n=22;
	d22.pvf();


	f(d21);//mert a b2 absztrakt ezert a nem absztraktokra tudom meghivni
	f(d22);
}
